{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","vacancy","inpLang","inpCity","headers","reg","className","type","onChange","this","changeInputLanguage","bind","value","changeInputCity","onClick","clickHandler","map","el","i","key","id","title","created_at","href","company_url","company","location","url","ev","setState","target","test","trim","length","fetch","then","response","json","data","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4TAiEmBA,G,kBA7Df,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAQ,GACRC,QAAQ,GACRC,QAAQ,GACRC,QAAQ,GACRC,IAAI,oBAPW,E,sEAWjB,OAAS,yBAAMC,UAAY,OACzB,2CACA,2BAAOC,KAAK,OAAOC,SAAUC,KAAKC,oBAAoBC,KAAKF,MAAOH,UAAU,iBAAiBM,MAAOH,KAAKT,MAAME,UAC/G,uCACA,2BAAOK,KAAK,OAAOC,SAAUC,KAAKI,gBAAgBF,KAAKF,MAAOH,UAAU,aAAaM,MAAOH,KAAKT,MAAMG,UACvG,4BAAQW,QAASL,KAAKM,aAAaJ,KAAKF,OAAxC,eACA,+BAAO,+BAAO,4BAAKA,KAAKT,MAAMI,QAAQY,KAAI,SAACC,EAAIC,GAC7C,OAAO,wBAAIC,IAAKF,EAAGC,GAAID,QACT,+BAAQR,KAAKT,MAAMC,QAAQe,KAAI,SAAAC,GAC3C,OAAQ,wBAAIE,IAAKF,EAAGG,IACpB,4BAAKH,EAAGI,OACR,4BAAKJ,EAAGK,YACR,4BAAKL,EAAGV,MACR,4BAAI,uBAAGgB,KAAMN,EAAGO,aAAcP,EAAGQ,UACjC,4BAAKR,EAAGS,UACR,4BAAI,uBAAGH,KAAMN,EAAGU,KAAZ,qB,sCAIMC,GACdnB,KAAKoB,SAAL,eAAkBpB,KAAKT,MAAvB,CAA8BG,QAAQyB,EAAGE,OAAOlB,W,0CAE9BgB,GAChBnB,KAAKoB,SAAL,eAAkBpB,KAAKT,MAAvB,CAA8BE,QAAQ0B,EAAGE,OAAOlB,W,yJAGjDH,KAAKT,MAAMK,IAAI0B,KAAKtB,KAAKT,MAAME,WAAUO,KAAKT,MAAMK,IAAI0B,KAAKtB,KAAKT,MAAMG,S,uBACzEM,KAAKoB,SAAL,eAAkBpB,KAAKT,MAAvB,CAA6BE,QAAQ,GAAIC,QAAQ,M,+BAG/CM,KAAKT,MAAME,QAAQ8B,OAAOC,OAAQ,GAAKxB,KAAKT,MAAMG,QAAQ6B,OAAOC,OAAO,G,iCACvDC,MAAM,+DAAD,OAAgEzB,KAAKT,MAAME,QAA3E,qBAA+FO,KAAKT,MAAMG,UACjIgC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GACJ,OAAOA,K,OAHHA,E,OAKN7B,KAAKoB,SAAL,eAAkBpB,KAAKT,MAAvB,CAA8BC,QAAQ,YAAIqC,MACvC7B,KAAKT,MAAMC,QAAQgC,OAAQ,EAC5BxB,KAAKoB,SAAL,eAAkBpB,KAAKT,MAAvB,CAA8BI,QAAQ,CAAC,QAAS,OAAQ,OAAS,UAAW,WAAY,WAExFK,KAAKoB,SAAL,eAAkBpB,KAAKT,MAAvB,CAA8BI,QAAQ,MAExCK,KAAKoB,SAAL,eAAkBpB,KAAKT,MAAvB,CAA8BG,QAAQ,MACtCM,KAAKoB,SAAL,eAAkBpB,KAAKT,MAAvB,CAA8BE,QAAQ,M,4GAvD5BqC,IAAMC,YCSJC,QACW,cAA7BC,OAAOhB,SAASiB,UAEe,UAA7BD,OAAOhB,SAASiB,UAEhBD,OAAOhB,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.86cbef90.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        vacancy:[],\n        inpLang:'',\n        inpCity:'',\n        headers:[],\n        reg:/[а-я]/i,\n      }\n    }\n    render() {\n      return ( < div className = \"App\" >\n        <span>LANGUAGE:</span>\n        <input type=\"text\" onChange={this.changeInputLanguage.bind(this)} className='input-language' value={this.state.inpLang}/>\n        <span>CITY:</span>\n        <input type=\"text\" onChange={this.changeInputCity.bind(this)} className='input-city' value={this.state.inpCity}/>\n        <button onClick={this.clickHandler.bind(this)}>Get Vacancy</button>\n        <table><thead><tr>{this.state.headers.map((el, i)=>{\n          return <td key={el+i}>{el}</td>\n        })}</tr></thead><tbody>{this.state.vacancy.map(el=>{\n            return (<tr key={el.id}>\n            <td>{el.title}</td>  \n            <td>{el.created_at}</td>\n            <td>{el.type}</td>\n            <td><a href={el.company_url}>{el.company}</a></td>\n            <td>{el.location}</td>\n            <td><a href={el.url}>MORE...</a></td></tr>)\n        })}</tbody></table>\n        </div>);\n      }\n      changeInputCity(ev){\n        this.setState({...this.state, inpCity:ev.target.value});\n      }\n      changeInputLanguage(ev){\n          this.setState({...this.state, inpLang:ev.target.value});\n      }\n     async clickHandler() {\n      if(this.state.reg.test(this.state.inpLang)||this.state.reg.test(this.state.inpCity)){\n        this.setState({...this.state,inpLang:'', inpCity:''});\n        return;\n      }\n       if(this.state.inpLang.trim().length >0 && this.state.inpCity.trim().length>0){\n        const data = await fetch(`https://github-jobs-proxy.appspot.com/positions?description=${this.state.inpLang}&location=${this.state.inpCity}`)\n        .then(response=>response.json())\n        .then(data=>{\n          return data;\n        });\n        this.setState({...this.state, vacancy:[...data]});\n        if(this.state.vacancy.length >0){\n          this.setState({...this.state, headers:['title', 'date', 'type' , 'company', 'location', 'link']})\n        }else{\n          this.setState({...this.state, headers:[]})\n        };\n        this.setState({...this.state, inpCity:''});\n        this.setState({...this.state, inpLang:''});\n      }\n      }\n    }\n\n\n\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}